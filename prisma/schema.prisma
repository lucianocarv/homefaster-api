datasource db {
  provider = "postgresql"
  url      = env("_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

generator zod {
  provider              = "zod-prisma"
  output                = "./models" // (default) the directory where generated zod schemas will be saved
  relationModel         = true // (default) Create and export both plain and related models.
  modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelSuffix           = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

model Property {
  id          Int          @id @default(autoincrement())
  description Description?
  address     Address?
  favorites   Favorite[]
  images      Images[]
  created_at  DateTime     @default(now()) @db.Timestamp()
  updated_at  DateTime     @updatedAt @db.Timestamp()
  listed_by   User         @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id     Int

  @@map("properties")
}

model Address {
  id                Int      @id @default(autoincrement())
  /// @zod.positive({message: "O número da propriedade precisar ser positivo!"})
  number            Int
  street            String   @db.VarChar(64)
  /// @zod.max(16)
  postal_code       String   @db.VarChar(16)
  place_id          String   @unique @db.VarChar(255)
  formatted_address String
  latitude          Float
  longitude         Float
  community         String   @db.VarChar(64)
  city              String   @db.VarChar(64)
  province          String   @db.VarChar(64)
  property          Property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property_id       Int      @unique
  created_by        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           Int
  created_at        DateTime @default(now()) @db.Timestamp()
  updated_at        DateTime @updatedAt @db.Timestamp()

  @@unique([id, property_id, place_id])
  @@map("p_addresses")
}

model Description {
  id            Int                       @id @default(autoincrement())
  title         String                    @db.VarChar(255)
  img_cover     String?                   @db.VarChar(255)
  /// @zod.positive({message: "O valor do aluguel precisa ser positivo!"})
  price         Float                     @db.Real
  /// @zod.min(1, {message:"A quantidade de banheiros precisar ser igual ou maior que 1"})
  bathrooms     Int
  /// @zod.min(1, {message:"A quantidade de quartos precisar ser igual ou maior que 1"})
  badrooms      Int
  furnished     Boolean
  rented        Boolean                   @default(false)
  /// @zod.min(1, {message:"A área da propriedade precisar ser igual ou maior que 1"})
  property_area Float                     @db.Real
  /// @zod.min(0, {message:"A quantidade de gatos precisar ser igual ou maior que 0"})
  pets_cats     Int
  /// @zod.min(0, {message:"A quantidade de cães precisar ser igual ou maior que 0"})
  pets_dogs     Int
  smoking       Boolean
  type          Type                      @relation(fields: [type_id], references: [id])
  type_id       Int
  utilities     UtilitiesOnDescriptions[]
  features      FeaturesOnDescriptions[]
  created_by    User                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id       Int
  created_at    DateTime                  @default(now()) @db.Timestamp()
  updated_at    DateTime                  @updatedAt @db.Timestamp()
  property      Property                  @relation(fields: [property_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  property_id   Int                       @unique

  @@unique([id, property_id])
  @@map("p_descriptions")
}

model Images {
  id          Int      @id @default(autoincrement())
  url         String   @db.VarChar(100)
  property    Property @relation(fields: [property_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  property_id Int
}

model Utility {
  id                        Int                       @id @default(autoincrement())
  /// @zod.min(3, {message:"O nome da utilidade precisar ter pelo menos 3 caracteres!"})
  name                      String                    @unique @db.VarChar(64)
  utilities_on_descriptions UtilitiesOnDescriptions[]
  created_at                DateTime                  @default(now()) @db.Timestamp()
  updated_at                DateTime                  @updatedAt @db.Timestamp()

  @@map("p_utilities")
}

model UtilitiesOnDescriptions {
  description    Description @relation(fields: [description_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description_id Int
  utility        Utility     @relation(fields: [utility_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  utility_id     Int
  created_at     DateTime    @default(now()) @db.Timestamp()
  updated_at     DateTime    @updatedAt @db.Timestamp()

  @@unique([description_id, utility_id])
  @@map("utilities_on_descriptions")
}

enum FeatureType {
  Property
  Building
  Community
}

model Feature {
  id                       Int                      @id @default(autoincrement())
  /// @zod.min(2, {message: "O nome da feature precisa ter pelo menos 2 caracteres!"})
  name                     String                   @db.VarChar(100)
  type                     FeatureType
  features_on_descriptions FeaturesOnDescriptions[]
  created_at               DateTime                 @default(now()) @db.Timestamp()
  updated_at               DateTime                 @updatedAt @db.Timestamp()

  @@unique([name])
  @@map("p_features")
}

model FeaturesOnDescriptions {
  description    Description @relation(fields: [description_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description_id Int
  feature        Feature     @relation(fields: [feature_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feature_id     Int
  created_at     DateTime    @default(now()) @db.Timestamp()
  updated_at     DateTime    @updatedAt @db.Timestamp()

  @@id([description_id, feature_id])
  @@map("features_on_descriptions")
}

model Type {
  id          Int           @id @default(autoincrement())
  /// @zod.min(2, {message:"O nome do tipo de propriedade precisar ter no mínimo 2 caracteres!"})
  name        String        @unique @db.VarChar(255)
  Description Description[]
  created_at  DateTime      @default(now()) @db.Timestamp()
  updated_at  DateTime      @updatedAt @db.Timestamp()

  @@map("p_types")
}

enum Role {
  User
  Admin
}

model User {
  id                Int           @id @default(autoincrement())
  /// @zod.min(2, {message: "O nome precisar ter 2 ou mais caracteres!"})
  first_name        String        @db.VarChar(255)
  /// @zod.min(2, {message: "O sobrenome precisa ter 2 ou mais caracteres!"})
  last_name         String        @db.VarChar(255)
  /// @zod.email({message: "O email precisa ser do tipo email@email.com"})
  email             String        @unique
  /// @zod.min(6, {message: "A senha deve conter no mínimo 6 caracteres"})
  /// @zod.regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$/gm, {message: "A senha deve ter no mínimo: 1 letra maiúscula, 1 letra minúscula e um número."})
  password          String
  phone             String?
  role              Role
  account_confirmed Boolean       @default(false)
  favorites         Favorite[]
  properties        Property[]
  addresses         Address[]
  descriptions      Description[]

  @@map("users")
}

model Favorite {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property_id Int

  @@unique([user_id, property_id])
  @@map("u_favorites")
}
