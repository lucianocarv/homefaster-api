datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Province {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(64)
  short_name String   @unique @db.VarChar(2)
  img_cover  String?  @db.VarChar(255)
  cities     City[]
  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  @@map("provinces")
}

model City {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(64)
  latitude    Float
  longitude   Float
  place_id    String      @db.VarChar(255)
  img_cover   String?     @db.VarChar(255)
  province    Province    @relation(fields: [province_id], references: [id], onUpdate: Cascade)
  province_id Int
  communities Community[]
  properties  Property[]
  created_at  DateTime    @default(now()) @db.Timestamp()
  updated_at  DateTime    @updatedAt @db.Timestamp()

  @@map("cities")
}

model Community {
  id                Int        @id @default(autoincrement())
  name              String     @db.VarChar(64)
  global_code       String     @unique @db.VarChar(255)
  formatted_address String     @db.VarChar(255)
  latitude          Float
  longitude         Float
  img_cover         String?    @db.VarChar(255)
  city              City       @relation(fields: [city_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  city_id           Int
  properties        Property[]
  created_at        DateTime   @default(now()) @db.Timestamp()
  updated_at        DateTime   @updatedAt @db.Timestamp()

  @@map("communities")
}

model Property {
  id           Int          @id @default(autoincrement())
  community    Community    @relation(fields: [community_id], references: [id], onUpdate: Cascade)
  community_id Int
  description  Description?
  address      Address?
  manager      Manager      @relation(fields: [manager_id], references: [id], onUpdate: Cascade)
  manager_id   Int
  created_at   DateTime     @default(now()) @db.Timestamp()
  updated_at   DateTime     @updatedAt @db.Timestamp()
  city         City         @relation(fields: [city_id], references: [id], onUpdate: Cascade)
  city_id      Int
  favorites    Favorites[]

  @@map("properties")
}

model Address {
  id                Int      @id @default(autoincrement())
  number            Int
  street            String   @db.VarChar(255)
  postal_code       String   @unique @db.VarChar(16)
  global_code       String   @unique @db.VarChar(255)
  place_id          String   @unique @db.VarChar(255)
  formatted_address String
  latitude          Float
  longitude         Float
  community         String   @db.VarChar(255)
  city              String   @db.VarChar(255)
  province          String   @db.VarChar(255)
  property          Property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property_id       Int      @unique
  created_at        DateTime @default(now()) @db.Timestamp()
  updated_at        DateTime @updatedAt @db.Timestamp()

  @@unique([id, property_id])
  @@map("p_addresses")
}

model Description {
  id            Int                       @id @default(autoincrement())
  title         String                    @db.VarChar(255)
  thumb         String
  price         Float                     @db.Real
  bathrooms     Int
  badrooms      Int
  furnished     Boolean
  rented        Boolean?                  @default(false)
  property_area Float                     @db.Real
  pets_cats     Int
  pets_dogs     Int
  smoking       Boolean
  type          Type                      @relation(fields: [type_id], references: [id])
  type_id       Int
  utilities     UtilitiesOnDescriptions[]
  features      FeaturesOnDescriptions[]
  created_at    DateTime                  @default(now()) @db.Timestamp()
  updated_at    DateTime                  @updatedAt @db.Timestamp()
  property      Property                  @relation(fields: [property_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  property_id   Int                       @unique

  @@unique([id, property_id])
  @@map("p_descriptions")
}

model Utility {
  id                        Int                       @id @default(autoincrement())
  name                      String                    @unique @db.VarChar(255)
  utilities_on_descriptions UtilitiesOnDescriptions[]
  created_at                DateTime                  @default(now()) @db.Timestamp()
  updated_at                DateTime                  @updatedAt @db.Timestamp()

  @@map("p_utilities")
}

model UtilitiesOnDescriptions {
  description    Description @relation(fields: [description_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description_id Int
  utility        Utility     @relation(fields: [utility_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  utility_id     Int
  created_at     DateTime    @default(now()) @db.Timestamp()
  updated_at     DateTime    @updatedAt @db.Timestamp()

  @@unique([description_id, utility_id])
  @@map("utilities_on_descriptions")
}

enum FeatureType {
  Property
  Building
  Community
}

model Feature {
  id                       Int                      @id @default(autoincrement())
  name                     String                   @db.VarChar(255)
  type                     FeatureType
  features_on_descriptions FeaturesOnDescriptions[]
  created_at               DateTime                 @default(now()) @db.Timestamp()
  updated_at               DateTime                 @updatedAt @db.Timestamp()

  @@map("p_features")
}

model FeaturesOnDescriptions {
  description    Description @relation(fields: [description_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description_id Int
  feature        Feature     @relation(fields: [feature_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feature_id     Int
  created_at     DateTime    @default(now()) @db.Timestamp()
  updated_at     DateTime    @updatedAt @db.Timestamp()

  @@id([description_id, feature_id])
  @@map("features_on_descriptions")
}

model Type {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  Description Description[]
  created_at  DateTime      @default(now()) @db.Timestamp()
  updated_at  DateTime      @updatedAt @db.Timestamp()

  @@map("p_types")
}

model Manager {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  website     String     @db.VarChar(255)
  phone       String     @db.VarChar(255)
  email       String     @db.VarChar(255)
  img_logo    String?    @db.VarChar(255)
  img_profile String?    @db.VarChar(255)
  properties  Property[]
  created_at  DateTime   @default(now()) @db.Timestamp()
  updated_at  DateTime   @updatedAt @db.Timestamp()
  user        User[]

  @@map("p_managers")
}

enum Role {
  User
  Manager
  Admin
}

model User {
  id         Int         @id @default(autoincrement())
  first_name String      @db.VarChar(255)
  last_name  String      @db.VarChar(255)
  avatar_url String
  email      String      @unique
  password   String
  phone      String
  city       String
  managing   Manager?    @relation(fields: [manager_id], references: [id], onUpdate: Cascade)
  manager_id Int?
  role       Role
  favorites  Favorites[]

  @@map("users")
}

model Favorites {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property_id Int

  @@unique([user_id, property_id])
  @@map("u_favorites")
}
